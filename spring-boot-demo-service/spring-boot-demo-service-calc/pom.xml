<?xml version="1.0"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
    xmlns="http://maven.apache.org/POM/4.0.0">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.catvgd</groupId>
        <artifactId>spring-boot-demo-service</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>

    <artifactId>spring-boot-demo-service-calc</artifactId>
    <name>spring-boot-demo-service-calc</name>

    <properties>
        <project.build.date>2017-10-10</project.build.date>
        <project.build.version>1.0.0</project.build.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <webserver.repostory>http://172.16.7.242/webdav</webserver.repostory>
        <docker.host>http://192.168.8.200:2375</docker.host>
        <docker.repostory>192.168.8.251</docker.repostory>
        <docker.registry.name>gdxw</docker.registry.name>
        <!-- Java接口和实体类 -->
        <targetJavaProject>${basedir}/src/main/java</targetJavaProject>
        <targetMapperPackage>com.catvgd.springbootdemo.common.tkmapper.mapper</targetMapperPackage>
        <targetModelPackage>com.catvgd.springbootdemo.common.tkmapper.model</targetModelPackage>
        <!-- XML生成路径 -->
        <targetResourcesProject>${basedir}/src/main/java</targetResourcesProject>
        <targetXMLPackage>com.catvgd.springbootdemo.common.tkmapper.mapper</targetXMLPackage>
    </properties>

    <dependencies>
        <!-- jdbc -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <!-- datasource druid -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
        </dependency>
        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
        </dependency>
        <!-- tk.mybatis -->
        <dependency>
            <groupId>tk.mybatis</groupId>
            <artifactId>mapper-spring-boot-starter</artifactId>
        </dependency>
        <!-- pagehelper -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
        </dependency>

        <!-- swagger2 -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
        </dependency>
        <!-- swagger2 -->

        <!-- redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.session</groupId>
            <artifactId>spring-session-data-redis</artifactId>
        </dependency>
        <!-- redis -->

        <!-- rabbitmq -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
        </dependency>
        <!-- rabbitmq -->

        <!-- websocket -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-websocket</artifactId>
        </dependency>
        <!-- websocket -->

        <!-- spring-boot-admin -->
        <dependency>
            <groupId>de.codecentric</groupId>
            <artifactId>spring-boot-admin-starter-client</artifactId>
        </dependency>
        <dependency>
            <groupId>de.codecentric</groupId>
            <artifactId>spring-boot-admin-server-ui-login</artifactId>
        </dependency>
        <!-- spring-boot-admin -->

        <!-- zookeeper -->
        <dependency>
            <groupId>org.apache.zookeeper</groupId>
            <artifactId>zookeeper</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-framework</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-recipes</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- zookeeper -->

        <!-- shiro -->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-spring</artifactId>
        </dependency>
        <!-- shiro -->

    </dependencies>

    <build>
        <finalName>${project.artifactId}-${project.version}</finalName>
        <resources>
            <!-- 指定所有资源文件都要打进包内，不写可能导致所有资源文件无法打进包 -->
            <!-- filtering属性要设置为false，否则xls文件会被maven转码导致打不开 -->
            <resource>
                <targetPath>${project.build.directory}/classes</targetPath>
                <directory>src/main/java</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*.xml</include>
                </includes>
                <excludes>
                    <exclude>**/*.java</exclude>
                </excludes>
            </resource>
            <resource>
                <targetPath>${project.build.directory}/classes</targetPath>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*</include>
                    <include>**/*.*</include>
                </includes>
            </resource>
            <resource>
                <targetPath>${project.build.directory}/docker</targetPath>
                <directory>src/main/docker</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/Dockerfile</include>
                    <include>**/docker-entrypoint.sh</include>
                    <include>**/wrapper-java-additional.temp</include>
                </includes>
            </resource>
        </resources>
        <extensions>
            <!-- <extension> -->
            <!-- <groupId>org.apache.maven.wagon</groupId> -->
            <!-- <artifactId>wagon-ssh</artifactId> -->
            <!-- <version>2.12</version> -->
            <!-- </extension> -->
            <!-- <extension> -->
            <!-- <groupId>org.apache.maven.wagon</groupId> -->
            <!-- <artifactId>wagon-http</artifactId> -->
            <!-- <version>2.12</version> -->
            <!-- </extension> -->
            <extension>
                <groupId>org.apache.maven.wagon</groupId>
                <artifactId>wagon-webdav-jackrabbit</artifactId>
                <version>2.12</version>
            </extension>
        </extensions>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <fork>true</fork>
                    <executable>true</executable>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-maven-plugin</artifactId>
                <version>1.3.5</version>
                <configuration>
                    <configurationFile>${basedir}/src/test/resources/generator/generatorConfig.xml</configurationFile>
                    <overwrite>true</overwrite>
                    <verbose>true</verbose>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>5.1.44</version>
                    </dependency>
                    <dependency>
                        <groupId>tk.mybatis</groupId>
                        <artifactId>mapper</artifactId>
                        <version>3.4.3</version>
                    </dependency>
                </dependencies>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>wagon-maven-plugin</artifactId>
                <version>1.0</version>
                <executions>
                    <execution>
                        <id>copy-to-webserver</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>upload-single</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <serverId>webserver</serverId>
                    <!-- 需要部署的文件 -->
                    <fromFile>${project.build.directory}/${project.build.finalName}.jar</fromFile>
                    <!-- 部署目录 -->
                    <url>dav:${webserver.repostory}</url>
                    <!-- <commands> -->
                    <!-- 关闭tomcat -->
                    <!-- <command>/home/hadoop/apache-tomcat-8.0.5/bin/shutdown.sh</command> -->
                    <!-- 删除之前解压后的目录 -->
                    <!-- <command>rm -rf /home/hadoop/apache-tomcat-8.0.5/webapps/osc-shop -->
                    <!-- </command> -->
                    <!-- 启动tomcat -->
                    <!-- <command>/home/hadoop/apache-tomcat-8.0.5/bin/startup.sh</command> -->
                    <!-- </commands> -->
                    <!-- <displayCommandOutputs>true</displayCommandOutputs> -->
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.0.0</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>tag-image</id>
                        <phase>package</phase>
                        <goals>
                            <goal>tag</goal>
                        </goals>
                        <configuration>
                            <image>${docker.registry.name}/${project.artifactId}:latest</image>
                            <newName>${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}</newName>
                        </configuration>
                    </execution>
                    <execution>
                        <id>tag-image2</id>
                        <phase>package</phase>
                        <goals>
                            <goal>tag</goal>
                        </goals>
                        <configuration>
                            <image>${docker.registry.name}/${project.artifactId}:latest</image>
                            <newName>${docker.repostory}/${docker.registry.name}/${project.artifactId}:latest</newName>
                        </configuration>
                    </execution>
                    <execution>
                        <id>push-image</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>push</goal>
                        </goals>
                        <configuration>
                            <imageName>${docker.repostory}/${docker.registry.name}/${project.artifactId}:${project.version}</imageName>
                        </configuration>
                    </execution>
                    <execution>
                        <id>push-image2</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>push</goal>
                        </goals>
                        <configuration>
                            <imageName>${docker.repostory}/${docker.registry.name}/${project.artifactId}:latest</imageName>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <!-- 私有仓库配置，需要settings.xml文件配合serverId对应的服务地址 -->
                    <serverId>harbor</serverId>
                    <registryUrl>${docker.repostory}</registryUrl>
                    <forceTags>true</forceTags>
                    <!--install阶段也上传，否则只有deploy阶段上传 -->
                    <pushImage>false</pushImage>
                    <dockerDirectory>${project.build.directory}/docker</dockerDirectory>
                    <dockerHost>${docker.host}</dockerHost>
                    <imageName>${docker.registry.name}/${project.artifactId}</imageName>
                    <imageTags>
                        <!--docker的tag为项目版本号、latest -->
                        <imageTag>${project.version}</imageTag>
                        <imageTag>latest</imageTag>
                    </imageTags>
                    <resources>
                        <!-- 将打包文件放入dockerDirectory指定的位置 -->
                        <!-- <rescource> -->
                        <!-- <targetPath>/</targetPath> -->
                        <!-- <directory>${project.build.directory}</directory> -->
                        <!-- <include>${project.build.finalName}.jar</include> -->
                        <!-- </rescource> -->
                        <!-- 输出Dockerfile至docker文件夹,如果不使用占位符,可使用以下配置 -->
                        <!-- <resource> -->
                        <!-- <targetPath>${project.build.directory}/docker</targetPath> -->
                        <!-- <directory>src/main/docker</directory> -->
                        <!-- <filtering>true</filtering> -->
                        <!-- <includes> -->
                        <!-- <include>**/Dockerfile</include> -->
                        <!-- <include>**/docker-entrypoint.sh</include> -->
                        <!-- <include>**/wrapper-java-additional.temp</include> -->
                        <!-- </includes> -->
                        <!-- </resource> -->
                    </resources>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <distributionManagement>
        <snapshotRepository>
            <id>maven-snapshots</id>
            <name>maven-snapshots</name>
            <url>http://192.168.8.242:8081/repository/maven-snapshots/</url>
        </snapshotRepository>
        <repository>
            <id>maven-releases</id>
            <name>maven-releases</name>
            <url>http://192.168.8.242:8081/repository/maven-releases/</url>
        </repository>
    </distributionManagement>

    <profiles>
        <profile>
            <!-- dev env -->
            <id>dev</id>
            <properties>
                <profiles.active>dev</profiles.active>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <!-- tst env -->
            <id>tst</id>
            <properties>
                <profiles.active>tst</profiles.active>
            </properties>
        </profile>
        <profile>
            <!-- prd env -->
            <id>prd</id>
            <properties>
                <profiles.active>prd</profiles.active>
            </properties>
        </profile>
    </profiles>

</project>
